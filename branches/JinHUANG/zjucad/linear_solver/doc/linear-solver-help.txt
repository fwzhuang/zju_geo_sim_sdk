# -*- mode: org; -*-
#+AUTHOR:    Shengwei ZHANG
#+DATE:      2014-07-05

* Abstruct
In geo\_sim\_sdk, there are several methods available to solve linear systems when the coefficient matrix is sparse. Special care should be taken in order to get a good result.

* Sparse Solvers
#+NAME: sparse_solver_table
geo\_sim\_sdk currently provides a limited set of wrappers to external solver libraries. They are summarized in the following table:
| linear\_solver/type.value | linear\_solver/name.value | Solver Kind | Matrix Kind | Dependencies                     | Notes                                                                          |
|---------------------------+---------------------------+-------------+-------------+----------------------------------+--------------------------------------------------------------------------------|
| PETsc                     |                           | PETsc       | SPD         | Requires the [[http://www.mcs.anl.gov/petsc/][PETsc]] package       | PETsc is dynamic load make sure your exectuable can find the dl\_petsc library |
| direct                    | cholmod                   | cholmod     |             | Requires the [[http://www.cise.ufl.edu/research/sparse/SuiteSparse/][SuiteSparse]] package |                                                                                |
| direct                    | umfpack                   | umfpack     |             | Requires the [[http://www.cise.ufl.edu/research/sparse/SuiteSparse/][SuiteSparse]] package |                                                                                |
| iterative                 | laspack                   | laspack     |             | Requires the laspack package     |                                                                                |

Here SPD means symmetric positive definite.

* Functions
** class linear\_solver
| static linear\_solver* | [[func_create][create(const hj::sparse::csc<double, int32\_t> &A, boost::property\_tree::ptree &opts)]] |
| int                    | [[func_solve][solve(const double *b, double *x, size\_t rhs, boost::property\_tree::ptree &opts)]]     |

#+NAME: func_create
*** static linear\_solver* create(const hj::sparse::csc<double, int32\_t> &A, boost::property\_tree::ptree &opts)
Create a linear solver according the opts.
The value put in the *opts* refer to the [[sparse_solver_table][sparse solver table]]: linear\_solver/type.value and linear\_solver/name.value.
*A* is the matrix of Ax=b. Be careful A must mach the Matrix Kind of the linear solver you create.

#+NAME: func_solve
*** int solve(const double *b, double *x, size\_t rhs, boost::property\_tree::ptree &opts)
Solve the linear equation of Ax=b, and store the result in x.
*rhs* is the column number of b.
*opts* for direct solver and PTEsc is nonsense currently and for laspack we can set:
laspack/solver: CG, BICGSTAB, ...
laspack/precond: Jacobi, SSOR, ILU
laspack/iter.value: [number of iteration]
laspack/relax.value:

* Examples
#+begin_src cpp :include <iostream>
#include <iostream>
#include <linear\_solver.h>

using namespace std;

int main(int argc, char *argv[])
{
  cout << "into main" << endl;
  zjucad::matrix::matrix<double> mat = zjucad::matrix::rand<double>(4,4);
  cout << "init finish" << endl;
  mat = temp(trans(temp(mat)) * mat); // for petsc SPD

  hj::sparse::csc<double, int32\_t> csc\_mat;
  boost::property\_tree::ptree opts;
  opts.put("linear\_solver/type.value", "PETsc");
  convert(mat, csc\_mat, 1e-4); // solver is for sparse matrix
  linear\_solver* solver = linear\_solver::create(csc\_mat, opts);
  zjucad::matrix::matrix<double> b(4,1);
  b[0] = 4;
  b[1] = 4;
  b[2] = 3;
  b[1] = 1;
  zjucad::matrix::matrix<double> x(4,1);

  boost::property\_tree::ptree opts\_solve;
  solver->solve(&b[0],&x[0],1,opts\_solve); // solve result in x

  // check if is right
  zjucad::matrix::matrix<double> diff = -1*b;
  hj::sparse::mv(false, csc\_mat, x, diff);
  cerr << norm(diff) << endl;
  delete solver;
  return 0;
}
#+end_src

* How to add new solver wrappers
Create an interface(abstract class) for the solver in file *zjucad/linear\_solver/src/dl\_[solver\_name].h* like this
#+begin_src cpp :include <iostream>
class PETsc
{
public:
  virtual ~PETsc() {}
};// pets\_init, the init function is in it's construct function

class PETsc\_CG
{
public:
  virtual int solve(const double *b, double *x, size\_t rhs, boost::property\_tree::ptree &opts) = 0;
  virtual ~PETsc\_CG() {}
};
#+end_src

Create the implementation /class [solver\_name]\_imp/ of the /class [solver\_name]/ in file *zjucad/linear\_solver/src/solver\_pack/dl\_[/solver\_name/].cpp*
and you also should add function /[solver\_name]* create\_[solver\_name]()/ in this file. Example see *zjucad/linear\_solver/src/solver\_pack/petsc/dl\_petsc.cpp*
make this a dynamic library named *dl\_[solver\_name].so(dl\_solver\_name.dll)*.

The create function /[solver\_name] * ucreate\_[solver\_name](const char *path=0)/ in file *zjucad/linear\_solver/src/dl\_[solver\_name]\_support.h*
implement this function in file *zjucad/linear\_solver/src/dl\_[solver\_name]\_support.cpp*
This function will open the dl\_[solver\_name].so and invoke the function /[solver\_name]* create\_[solver\_name]()/ in it to create a entity of /class [solver\_name]\_imp/
then you can use this entity as /class [solver\_name]/ to solve your linear equation.
